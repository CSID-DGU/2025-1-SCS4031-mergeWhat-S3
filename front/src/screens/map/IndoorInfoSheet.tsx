import React, {useRef, useState} from 'react';
import {View, Text, TouchableOpacity, StyleSheet} from 'react-native';
import {fetchStoresByCategory} from '../../api/market';
import {WebView, WebViewMessageEvent} from 'react-native-webview';

export type Store = {
  id: number;
  name: string;
  category: string;
  center_lat: number;
  center_lng: number;
};

const CategoryButton = ({
  label,
  onPress,
}: {
  label: string;
  onPress: () => void;
}) => (
  <TouchableOpacity style={styles.button} onPress={onPress}>
    <Text style={styles.buttonText}>{label}</Text>
  </TouchableOpacity>
);

const IndoorInfoSheet = ({polygonName}: {polygonName: string}) => {
  const [storeList, setStoreList] = useState<any[]>([]);
  const webViewRef = useRef<WebView>(null);

  const handleCategoryPress = async (category: string) => {
    try {
      const stores: Store[] = await fetchStoresByCategory(
        category,
        polygonName,
      );

      console.log(
        'üì§ WebViewÎ°ú Î≥¥ÎÇº ÎßàÏª§ Î™©Î°ù:',
        stores.map(store => ({
          lat: store.center_lat,
          lng: store.center_lng,
        })),
      );

      webViewRef.current?.postMessage(
        JSON.stringify({
          type: 'showMarkers',
          markers: stores.map(store => ({
            lat: store.center_lat,
            lng: store.center_lng,
          })),
        }),
      );
    } catch (error) {
      console.error('‚ùå Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤ÄÏÉâ Ïò§Î•ò:', error);
    }
  };

  return (
    <View style={{padding: 16}}>
      <Text style={styles.sectionTitle}>Ïπ¥ÌÖåÍ≥†Î¶¨</Text>
      <View style={styles.buttonRow}>
        <CategoryButton
          label="ü•¨ ÎÜçÏàòÏÇ∞Î¨º"
          onPress={() => handleCategoryPress('ÎÜçÏàòÏÇ∞Î¨º')}
        />
        <CategoryButton
          label="üç° Î®πÍ±∞Î¶¨"
          onPress={() => handleCategoryPress('Î®πÍ±∞Î¶¨')}
        />
        <CategoryButton
          label="üëï Ïò∑"
          onPress={() => handleCategoryPress('Ïò∑')}
        />
        <CategoryButton
          label="üéé ÌòºÏàò"
          onPress={() => handleCategoryPress('ÌòºÏàò')}
        />
        <CategoryButton
          label="üí≥ Í∞ÄÎßπÏ†ê"
          onPress={() => handleCategoryPress('Í∞ÄÎßπÏ†ê')}
        />
      </View>

      <Text style={styles.sectionTitle}>Ï£ºÎ≥Ä Ï†ïÎ≥¥</Text>
      <View style={styles.buttonRow}>
        <CategoryButton
          label="üöó Ï£ºÏ∞®Ïû•"
          onPress={() => handleCategoryPress('Ï£ºÏ∞®Ïû•')}
        />
        <CategoryButton
          label="üöª ÌôîÏû•Ïã§"
          onPress={() => handleCategoryPress('ÌôîÏû•Ïã§')}
        />
        <CategoryButton
          label="üé° Í∑ºÏ≤ò ÎÜÄÍ±∞Î¶¨"
          onPress={() => handleCategoryPress('Í∑ºÏ≤ò ÎÜÄÍ±∞Î¶¨')}
        />
      </View>

      {/* Í≤∞Í≥º Î¶¨Ïä§Ìä∏ Î†åÎçîÎßÅ */}
      {storeList.length > 0 && (
        <View style={{marginTop: 24}}>
          {storeList.map((store, index) => (
            <View key={index} style={{marginBottom: 12}}>
              <Text style={{fontWeight: 'bold'}}>{store.name}</Text>
              <Text style={{color: '#666'}}>
                {store.description || 'ÏÑ§Î™Ö ÏóÜÏùå'}
              </Text>
            </View>
          ))}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 15,
    marginTop: 24,
    color: '#333',
  },
  buttonRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  button: {
    paddingHorizontal: 10,
    paddingVertical: 8,
    backgroundColor: '#fff',
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#aaa',
    marginRight: 8,
    marginBottom: 8,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 3,
  },
  buttonText: {
    fontSize: 14,
  },
});

export default IndoorInfoSheet;
